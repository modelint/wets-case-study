// Class: Wets
// Activity: Service transit request
// Event Parameters: new license, direction

// Make sure this isn't a redundant request
//
// First attempt to find a vessel with the same license number

identical vessel .= Vessel(License == ^new license) 

// If there is vessel with the same license number, reject this request

identical vessel? Request denied(vessel license: ^new license) -> VESSEL : 

// If not, then get the current unix epic time to order transit requests

{
    arrival time = UnixEpochTime.Now()

//  If the arrival time is <= the arrival time of the last vessel, increment it to enforce ordering

    arrival time <= Wets.last arrival time? arrival time.increment minimal()

// Now see if there are any available transit lanes

    available transit lanes ..= /R1/Transit Lane(! /R4/Assigned Vessel)
    !available transit lanes?

// No Transit Lanes are available, so create a Waiting Vessel and establish relationships

    *Vessel(License: ^new license, Transfer direction: ^direction) &R2 *Waiting Vessel(Arrival time: arrival time) &R3 me : 

// There are available transit lanes, see if there is one the same direction as the requesting vessel
    {
        chosen transit lane .= available transit lanes(1, Last transfer direction : ^direction)

// If there isn't one in the same direction, just use one of the available ones

        !chosen transit lane? chosen transit lane .= available transit lanes(1)

// Get data required to create an Assigned Vessel

         first gate .= chosen transit lane/R5/Transit Lane Gate/OR7/(-^Position) // get lowest position - wrong scrall syntax

// Create an Assigned Vessel and establish relationships

         *Vessel(License: ^new license, Transfer direction: ^direction) &R2 *Assigned Vessel(Status: .moving)  &R10 first gate, &R4 chosen transit lane
    } 

// Send an event to the requesting vessel to try it know its request has been  granted
 
    Request granted(license: ^new license) -> VESSEL

// Send an event to the transit lane to let it know it has a vessel to move

    Vessel assigned -> chosen transit lane
}
//  Go back to the Idle state and wait for more work

Continue -> me
