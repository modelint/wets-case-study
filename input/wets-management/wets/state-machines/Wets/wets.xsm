metadata
    Title : Wets State Machine Diagram
    Author : Michael M. Lee
    Document ID : mint.wets.td.4
    Modification date : May 2, 2025
    Version : 0.6
    Organization : Model Integration, LLC
    Copyright notice > MIT
    Organization logo > mint
domain Wets Management
class Wets
events
    Request transit
    Request removal
    Transit completed
    Continue
--
state IDLE
activity
transitions
    Request transit > Service Transit Request
    Request removal > Service Removal Request
    Transit completed > Service Transit Completed
--
state Service Transit Request(new license : Vessel License, requested direction : Vessel Transfer direction) //ML Is Vessel Transfer direction correct type?
activity
    // Make sure this isn't a redundant request by first attempting
    // to find a vessel with the same license number

    identical vessel .= Vessel(License == ^new license)

    identical vessel?
        // If there is vessel with the same license number, reject this request

        Request denied(vessel license: ^new license) -> VESSEL :

        // If not, then increment the last arrival time
        {
            ++last arrival time 

            // Now see if there are any available transit lanes

            available transit lanes ..= /R1/Transit Lane( ! /R4/Assigned Vessel )  //ML Plausible but not totally understood
            available transit lanes?

               // There are available transit lanes, see if there is one the same Last transfer direction as the requested direction
               {
                   chosen transit lane .= available transit lanes(1, Last transfer direction : ^requested direction)

                   // If there isn't one in the same direction, just use one of the available ones

                   !chosen transit lane? chosen transit lane .= available transit lanes(1)

                   // Get the first gate for traversing the chosen transit lane in the requested direction.
                   // If requested direction is up, then first gate will be downstream, otherwise it will be upstream.

                   ^requested direction == .up?
                       first gate .= chosen transit lane/R5/Transit Lane Gate/OR7/downstream/~| :
                       first gate .= chosen transit lane/R5/Transit Lane Gate/OR7/upstream/~|

                   // Create an Assigned Vessel and establish relationships

                   *Vessel(License: ^new license, Transfer direction: ^requested direction) &R2 *Assigned Vessel( Status: .moving) &R10 first gate, &R4 chosen transit lane  //ML Does "first gate" instance set Assigned Vessel.Position OK for R10
                } :

               // No Transit Lanes are available, so create a Waiting Vessel and establish relationships

                *Vessel(License: ^new license, Transfer direction: ^direction) &R2 *Waiting Vessel(Arrival time: me.last arrival time) &R3 me

            // Send an event to the requesting vessel to let it know that its request has been granted

            Request granted(license: ^new license) -> VESSEL

            // Send an event to the transit lane to let it know it has a vessel to move

            Vessel assigned -> chosen transit lane
        }
    //  Go back to the Idle state and wait for more work

    Continue -> me

transitions
    Request transit >
    Request removal >
    Transit completed >
    Continue > IDLE
--
state Service Removal Request( old license : Vessel License )
activity
    // See if this vessel is waiting.

    identical vessel .= Waiting Vessel(License == ^old license)
    !identical vessel?

        // There is not a waiting vessel with this license number so
        // send the requestor a request denied.

        Request denied(vessel license: ^old license) -> VESSEL :
        {
        // This vessel is waiting, so send it a Request granted event
        // and delete it and its super type.

            Request granted(license: ^old license) -> VESSEL
            !*Vessel(License: ^old license), Waiting Vessel(License: ^old license)
        }
    //  Go back to the Idle state and wait for more work.

    Continue -> me

transitions
    Request transit >
    Request removal >
    Transit completed >
    Continue > IDLE
--
state Service Transit Completed(free transit lane : Transit Lane, completed license : Vessel License)
activity

    //  Send the Assigned Vessel a Transit completed event and then
    //  delete the Supertype Vessel and associated subtype Assigned Vessel.

    Transit completed (vessel license : ^completed license) -> VESSEL
    !*Vessel(License: ^completed license), Assigned Vessel(License: ^completed license)

    // Now get the earliest waiting vessel

    earliest waiting vessel .= me/R3/OR9/earlier/~| 
    earliest waiting vessel?

        // There is an earliest waiting vessel
        {    
            // First, get the earliest waiting vessel's requested direction

            requested direction = earliest waiting vessel/R2/Vessel.Transfer direction

            // Get the first gate for traversing the chosen transit lane in the requested direction.
            // If requested direction is up, then first gate will be downstream, otherwise it will be upstream.

            requested direction == .up?
                first gate .= free transit lane/R5/Transit Lane Gate/OR7/downstream/~| :
                first gate .= free transit lane/R5/Transit Lane Gate/OR7/upstream/~|

            // Migrate the Waiting Vessel to an Assigned Vessel.

            earliest waiting vessel >> Assigned Vessel(Status: .moving) &R10 first gate, &R4 free transit lane  //ML Does "first gate" instance set Assigned Vessel.Position OK for R10

            //  Send an event to the transit lane to let it know it has a vessel to move.

            Vessel assigned -> free transit lane 
        }
    //  Go back to the Idle state and wait for more work

    Continue -> me

transitions
    Request transit >
    Request removal >
    Transit completed >
    Continue > IDLE
--
