metadata
    Title : Wets State Machine Diagram
    Author : Michael M. Lee
    Document ID : mint.wets.td.xx
    Modification date : April 29, 2025
    Version : 0.1.0
    Organization : Model Integration, LLC
    Copyright notice > MIT
    Organization logo > mint
domain Wets Management
class Wets
events
    Request transit
    Request removal
    Transit completed
    Continue
--
state IDLE
activity
transitions
    Request transit > Service Transit Request
    Request removal > Service Removal Request
    Transit completed > Service Transit Completed
--
state Service Transit Request( new license : Vessel License, direction : Transfer Direction )
activity
    // Make sure this isn't a redundant request by first attempting
    // to find a vessel with the same license number

    identical vessel .= Vessel(License == ^new license)

    identical vessel?
        // If there is vessel with the same license number, reject this request
        Request denied(vessel license: ^new license) -> VESSEL :
        // If not, then get the current unix epic time to order transit requests
        {
            arrival time = UnixEpochTime.Now()
            //  If the arrival time is <= the arrival time of the last vessel, increment it to enforce ordering
            arrival time <= Wets.last arrival time? arrival time.slightly later() // LS better name for nudge op?

            // Now see if there are any available transit lanes
            assigned transit lanes ..= /R1/Transit Lane( ! /R4/Assigned Vessel )
            // LS Simpler but equivalent to: available transit lanes ..= /R1/Transit Lane - Assigned Vessel(*)/R4/Transit Lane

            available_transit_lanes?

                // There are available transit lanes, see if there is one the same direction as the requesting vessel
                {
                    chosen transit lane .= available transit lanes(1, Last transfer direction : ^direction)

                    // If there isn't one in the same direction, just use one of the available ones
                    !chosen transit lane?
                        chosen transit lane .= available transit lanes(1)

                    // Get data required to create an Assigned Vessel
                    first gate .= chosen transit lane/R5/Transit Lane Gate/OR7/downstream/~| // LS  get lowest position

                    // Create an Assigned Vessel and establish relationships
                    *Vessel(License: ^new license, Transfer direction: ^direction) &R2 *Assigned Vessel(
                        Status: .moving) &R10 first gate, &R4 chosen transit lane
                } :
                // No Transit Lanes are available, so create a Waiting Vessel and establish relationships
                *Vessel(License: ^new license, Transfer direction: ^direction) &R2 *Waiting Vessel(
                    Arrival time: arrival time) &R3 me :

        // Send an event to the requesting vessel to let it know that its request has been granted
        Request granted(license: ^new license) -> VESSEL

        // Send an event to the transit lane to let it know it has a vessel to move
        Vessel assigned -> chosen transit lane
    }

    //  Go back to the Idle state and wait for more work
    Continue -> me
transitions
    Continue > IDLE
--
state Service Removal Request( old license : Vessel License )
activity
    // See if this vessel is waiting.

    identical vessel .= Waiting Vessel(License == ^old license)
    !identical vessel?

    // There is not a waiting vessel with this license number so
    // send the requestor a request denied.

    Request denied(vessel license: ^old license) -> VESSEL :
    {
    // This vessel is waiting, so send it a Request granted event
    // and delete it and its super type.

        Request granted(license: ^old license) -> VESSEL
        !*Vessel(License: ^old license), Waiting Vessel(License: ^old license)
    }
    //  Go back to the Idle state and wait for more work.
    Continue -> me
transitions
    Continue > IDLE
--
state Service Transit Completed( transit lane : Transit Lane Name, completed license : Vessel License )
activity
    //  Start by sending the Assigned Vessel a Transit completed event and then
    //  delete the Supertype Vessel and associated subtype Assigned Vessel.

    Transit completed (vessel license: ^completed license) -> VESSEL
    !*Vessel(License: ^completed license), Assigned Vessel(License: ^completed license)

    // Now see if there is a next waiting vessel

    next waiting vessel .= me/R3/Waiting Vessel/OR9/earlier/~| // LS
    next waiting vessel?

    // There is a next waiting vessel
    {
    //  Get the 1st gate in this available Transit Lane

        first gate .= ^transit lane/R5/Transit Lane Gate/OR7/downstream/~|
        //first gate .= ^transit lane/R5/Transit Lane Gate/OR7/(-^Position)

    //  Migrate the Waiting Vessel to an Assigned Vessel.

        next waiting vessel >> Assigned Vessel(Status: .moving) &R10 first gate, &R4 ^transit lane // LS see notes

    //  Send an event to the transit lane to let it know it has a vessel to move.

        Vessel assigned -> ^transit lane // LS see notes
    }
    //  Go back to the Idle state and wait for more work

    Continue -> me
transitions
    Continue > IDLE
--
