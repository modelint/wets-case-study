metadata
    Title : Wets State Machine Diagram
    Author : Michael M. Lee
    Document ID : mint.wets.td.4
    Modification date : May 2, 2025
    Version : 0.3
    Organization : Model Integration, LLC
    Copyright notice > MIT
    Organization logo > mint
domain Wets Management
class Wets
events
    Request transit
    Request removal
    Transit completed
    Continue
--
state IDLE
activity
transitions
    Request transit > Service Transit Request
    Request removal > Service Removal Request
    Transit completed > Service Transit Completed
--
state Service Transit Request(new license : Vessel License, direction : Transfer Direction)
activity
    // Make sure this isn't a redundant request by first attempting
    // to find a vessel with the same license number

    identical vessel .= Vessel(License == ^new license)

    identical vessel?
        // If there is vessel with the same license number, reject this request
        Request denied(vessel license: ^new license) -> VESSEL :
        // If not, then update the last arrival time
        {
            me.last arrival time = me.last arrival time +1

            // Now see if there are any available transit lanes
            available transit lanes ..= /R1/Transit Lane( ! /R4/Assigned Vessel )
            available transit lanes?

                // There are available transit lanes, see if there is one the same direction as the requesting vessel
                {
                    chosen transit lane .= available transit lanes(1, Last transfer direction : ^direction)

                    // If there isn't one in the same direction, just use one of the available ones
                    !chosen transit lane?
                        chosen transit lane .= available transit lanes(1)

                    // Get the first gate for traversing the transit lane in the requested direction
                    //  **** This is broken. See Service Transit Completed
                    first gate .= chosen transit lane/R5/Transit Lane Gate/OR7/downstream/~| 
                    //  ****
                    // Create an Assigned Vessel and establish relationships
                    *Vessel(License: ^new license, Transfer direction: ^direction) &R2 *Assigned Vessel(
                        Status: .moving) &R10 first gate, &R4 chosen transit lane
                } :
                // No Transit Lanes are available, so create a Waiting Vessel and establish relationships
                *Vessel(License: ^new license, Transfer direction: ^direction) &R2 *Waiting Vessel(
                    Arrival time: me.last arrival time) &R3 me :

        // Send an event to the requesting vessel to let it know that its request has been granted
        Request granted(license: ^new license) -> VESSEL

        // Send an event to the transit lane to let it know it has a vessel to move
        Vessel assigned -> chosen transit lane
    }

    //  Go back to the Idle state and wait for more work
    Continue -> me
transitions
    Continue > IDLE
--
state Service Removal Request( old license : Vessel License )
activity
    // See if this vessel is waiting.

    identical vessel .= Waiting Vessel(License == ^old license)
    !identical vessel?

    // There is not a waiting vessel with this license number so
    // send the requestor a request denied.

    Request denied(vessel license: ^old license) -> VESSEL :
    {
    // This vessel is waiting, so send it a Request granted event
    // and delete it and its super type.

        Request granted(license: ^old license) -> VESSEL
        !*Vessel(License: ^old license), Waiting Vessel(License: ^old license)
    }
    //  Go back to the Idle state and wait for more work.
    Continue -> me
transitions
    Continue > IDLE
--
state Service Transit Completed( transit lane id : Transit Lane Name, completed license : Vessel License )
activity
    //  Send the Assigned Vessel a Transit completed event and then
    //  delete the Supertype Vessel and associated subtype Assigned Vessel.

    Transit completed (vessel license: ^completed license) -> VESSEL
    !*Vessel(License: ^completed license), Assigned Vessel(License: ^completed license)

    // Now get the earliest waiting vessel

    earliest waiting vessel .= me/R3/Waiting Vessel/OR9/earlier/~| 
    earliest waiting vessel?

        // There is an earliest waiting vessel
        {    
        // Get the 1st gate in this just freed Transit Lane that the waiting vessel will 
        // need to enter to go in the direction it requested. 


        //  ========= Need Scrall for this logic:

        //  traverse R3 from me to a Waiting Vessel and then 
        //  traverse R2 from that Waiting Vessel to a Vessel and then
        //  get that Vessel's Transfer direction attribute and set requested direction to that value

        //  if requested direction == up then first gate direction = downstream else first gate direction = upstream

        //  first gate = the end Transit Lane Gate on OR7 going in the first gate direction
        //  ========

        //  Migrate the Waiting Vessel to an Assigned Vessel.

            earliest waiting vessel >> Assigned Vessel(Status: .moving) &R10 first gate, &R4 ^transit lane // LS see notes

        //  Send an event to the transit lane to let it know it has a vessel to move.

            Vessel assigned -> Transit Lane (Name == ^transit lane id) 
        }
    //  Go back to the Idle state and wait for more work

    Continue -> me
transitions
    Continue > IDLE
--
