metadata
    Title : Wets State Machine Diagram
    Author : Michael M. Lee
    Document ID : mint.wets.td.4
    Modification date : September 20, 2025
    Version : 0.11
    Organization : Model Integration, LLC
    Copyright notice > MIT
    Organization logo > mint
domain Wets Management
class Wets
events
    Transfer request
    Removal request
    Transfer completed
    Continue
--
state Idle
activity
transitions
    Transfer request > Service Transit Request
    Removal request > Service Removal Request
    Transfer completed > Service Transfer Completed
--
state Service Transfer Request(new license : Vessel License, direction : Transfer direction) 
activity
    // Make sure this isn't a redundant request by first attempting
    // to find a vessel with the same license number

    identical vessel .= Vessel(License == ^new license)

    identical vessel?
        // If there is vessel with the same license number, reject this request

        Request denied(vessel license: ^new license) -> VESSEL :

        // If not, then increment the Last waiting position
        {
            ++Last waiting position 

            // Now see if there are any available transit lanes

            available transit lanes ..= /R1/Transit Lane( ! /R4/Assigned Vessel )
            available transit lanes?

               // There are available transit lanes, see if there is one the same available transfer direction as the requested direction
               {
                    chosen transit lane .= available transit lanes(1, available transfer direction : ^direction)

                    // If there isn't one in the same direction, just use one of the available ones

                    !chosen transit lane? chosen transit lane .= available transit lanes(1)

                    // Get the first gate for traversing the chosen transit lane in the requested direction.
                    / If requested direction is up, then first gate will be downstream, otherwise it will be upstream.

                    ^direction == _up?
                        first gate .= chosen transit lane/R5/Transit Lane Gate/OR7/downstream/~| :
                        first gate .= chosen transit lane/R5/Transit Lane Gate/OR7/upstream/~|

                    // Create an Assigned Vessel and establish relationships

                    new vessel .= *Vessel(License: ^new license, Transfer direction: ^direction) &R2 *Assigned Vessel( Status: _moving) &R4 chosen transit lane

                    // Create the associative class Active Gate Move 

                    *Active Gate Move &R10 new vessel/R2/Assigned Vessel, first gate

                    // Send an event to the transit lane to let it know it has a vessel to move

                    Vessel assigned -> chosen transit lane
                } :

               // No Transit Lanes are available, so create a Waiting Vessel and establish relationships

                *Vessel(License: ^new license, Transfer direction: ^direction) &R2 *Waiting Vessel(Waiting position: me.Last waiting position) &R3 me

            // Send an event to the requesting vessel to let it know that its request has been granted

            Request granted(vessel license: ^new license) -> VESSEL
        }
    
    //  Go back to the Idle state and wait for more work

    Continue -> me

transitions
    Continue > Idle
--
state Service Removal Request( old license : Vessel License )
activity
    // See if this vessel is waiting.

    identical vessel .= Waiting Vessel(License == ^old license)
    !identical vessel?

        // There is not a waiting vessel with this license number so
        // send the requestor a request denied.

        Request denied(vessel license: ^old license) -> VESSEL :
        {
        // This vessel is waiting, so send it a Request granted event
        // and delete it and its super type.

            Request granted(vessel license: ^old license) -> VESSEL
            !*Vessel(License: ^old license), Waiting Vessel(License: ^old license)
        }
    //  Go back to the Idle state and wait for more work.

    Continue -> me

transitions
    Continue > Idle
--
state Service Transfer Completed(free transit lane : Transit Lane, completed license : Vessel License)
activity

    // Send the  Vessel a Transfer completed event

    Transfer completed (vessel license : ^completed license) -> VESSEL

    // Next delete the associated class Active Gate Move followed by deleting 
    // the Supertype Vessel and associated subtype Assigned Vessel.

    !*/R4/R10Active Gate Move
    !*Vessel(License: ^completed license), Assigned Vessel(License: ^completed license)

    // Now get the earliest waiting vessel

    earliest waiting vessel .= me/R3/OR9/earlier/~| 
    earliest waiting vessel?

        // There is an earliest waiting vessel
        {    
            // First, get the earliest waiting vessel's requested direction

            requested direction = earliest waiting vessel/R2/Vessel.Transfer direction

            // Get the first gate for traversing the chosen transit lane in the requested direction.
            // If requested direction is up, then first gate will be downstream, otherwise it will be upstream.

            requested direction == .up?
                first gate .= ^free transit lane/R5/Transit Lane Gate/OR7/downstream/~| :
                first gate .= ^free transit lane/R5/Transit Lane Gate/OR7/upstream/~|

            // Migrate the Waiting Vessel to an Assigned Vessel.

            earliest waiting vessel >> Assigned Vessel(Status: _moving) &R4 ^free transit lane  

            // Create the associative object Active Gate Move

            *Active Gate Move &R10 ^free transit lane/R4/Assigned Vessel, first gate

            //  Send an event to the transit lane to let it know it has a vessel to move.

            Vessel assigned -> ^free transit lane 
        } :
        // There is no earliest waiting vessel so reset the Last waiting position

        Last waiting position = 0

    //  Go back to the Idle state and wait for more work

    Continue -> me

transitions
    Continue > Idle
--
